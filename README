terst - A terse, expressive, and easy-to-use testing library for Go (golang)

DESCRIPTION

SYNOPSIS

    import (
        "testing"
        . "terst"
    )

    func Test(t *testing.T) {
        Terst(t) // Associate terst methods with t (the current testing.T)
        Is("apple", "apple") // Pass
        Is(1, "1") // Pass: 1 is converted to a string before testing
        Is("apple", "orange") // Fail: emits nice-looking diagnostic 
        Compare(1, ">", 0) // Pass

        Is(1, 1.0) // Fail: comparing an integer to a float
        Compare(1, "==", 1.0) // Pass
        Like(1, 1.0) // Pass
    }

USAGE

    Equal( have interface{}, want interface{} )
        Test have against want via ==
        No special coercion or type inspection is done
        If the type is incomparable this will panic

    Unequal( ... )
        Test have against want via !=
        Like Equal, no special coercion or type inspection is done

    Pass( result bool )
        Passing is if result is true 

    Fail( result bool )
        Passing is if result is false 

    Is( have interface{}, want string )
        Convert have to a string (via fmt.Sprintf("%v")) and test against want via ==

    Is( have interface{}, want interface{} )
        A shortcut for: Compare(have, "==", want)

    IsNot( ... )
        Same behavior as with Is but with the opposite result

    Like( have interface{}, want string )
        A regular expression test. Convert have to a string (via fmt.Sprintf("%v"))
        and test against the regular expression specified by want
        Passing is a match: The result of regexp.Match( ... ) is true

    Like( have interface{}, want interface{} )
        A shortcut for: Compare( have, "{}~ ==", want )

    Unike( have interface{}, want string )
        Same behavior as with Like but with the opposite result
        Passing is a mismatch: The result of regexp.Match( ... ) is false

    Unlike( have interface{}, want interface{} )
        A shortcut for: Compare( have, "!=", want )

    Compare( have interface{}, operator string, want interface{} )
        Compare have to want using the specified operator
        The operator can be one of the following:
            ==
            !=
            <
            <=
            >
            >=

        Compare is not strict when comparing numeric types, and
        will make a best effort to promote have and want to the
        same type

    * Each of the methods above can take one additional (optional) argument,
    which is a string describing the test. If the test fails, this
    description will be included with the test output

AUTHOR
    Robert Krimen <robertkrimen@gmail.com>

FUTURE
- Add Catch() for testing panic()
- Add Same() for testing via .DeepEqual && == (without panicking?)
